<?php

/**
 * @file
 * Form emoji parser.
 */

/**
 * Validate function must be the first one to get executed.
 *
 * Implements hook_form_alter().
 */
function form_emoji_parser_form_alter(&$form, &$form_state) {
  array_unshift($form['#validate'], 'form_emoji_parser_validate');
}

/**
 * Custom validate parser.
 */
function form_emoji_parser_validate(&$form, &$form_state) {
  $values = $form_state['values'];
  foreach ($values as $key => $value) {
  	if(!is_array($value)) {
  		// Standart forms.
  		$form_state['values'][$key] = form_emoji_parser_filter_value($value);
  	} else {
  		// Webform module.
  		if($key == 'submitted') {
  			foreach ($value as $label => $val) {
  				$form_state['values']['submitted'][$label] = form_emoji_parser_filter_value($val);
  			}
  		}
  	}
  }
}

/**
 * Emoji removal.
 * http://magp.ie/2011/01/06/remove-non-utf8-characters-from-string-with-php/
 */
function form_emoji_parser_filter_value($text) {

	//reject overly long 2 byte sequences, as well as characters above U+10000 and replace with ?
	$text = preg_replace('/[\x00-\x08\x10\x0B\x0C\x0E-\x19\x7F]'.
	 '|[\x00-\x7F][\x80-\xBF]+'.
	 '|([\xC0\xC1]|[\xF0-\xFF])[\x80-\xBF]*'.
	 '|[\xC2-\xDF]((?![\x80-\xBF])|[\x80-\xBF]{2,})'.
	 '|[\xE0-\xEF](([\x80-\xBF](?![\x80-\xBF]))|(?![\x80-\xBF]{2})|[\x80-\xBF]{3,})/S',
	 '', $text );
	 
	//reject overly long 3 byte sequences and UTF-16 surrogates and replace with ?
	$text = preg_replace('/\xE0[\x80-\x9F][\x80-\xBF]'.
	 '|\xED[\xA0-\xBF][\x80-\xBF]/S','', $text );

    return $text;
}
